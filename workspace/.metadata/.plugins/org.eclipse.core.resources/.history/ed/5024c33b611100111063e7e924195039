package net.psiX.connection;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.StringTokenizer;

import net.psiX.http.ClientHttpRequest;
import net.psiX.objects.PsiXObject;

public class PsiXConnector {

	/**
	 * 
	 * @author Tivakar
	 * @param xmlfile
	 * @param xmldtd
	 * @param docid
	 * @return
	 * 
	 *         This method publishDoc is used for publishing the document along
	 *         with document id
	 */
	public String publishDoc(String xmlfile, String xmldtd, String docid) {
		ClientHttpRequest clientReq = null;
		String output = "";
		
		File dtd = null;
		
		if(!xmldtd.equals("")){
			dtd = new File(xmldtd);
		}
		
		try {
			clientReq = new ClientHttpRequest(
					"http://vortex.sce.umkc.edu/cgi-bin/raopr/publish.cgi");

			clientReq.setParameter("xmlfile", new File(xmlfile));
			clientReq.setParameter("xmldtd", dtd);
			clientReq.setParameter("docid", docid);

			InputStream input = clientReq.post();

			int data = input.read();
			while (data != -1) {
				output = output + (char) data;
				data = input.read();
			}
			input.close();
			System.out.println(output);

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return output;

	}

	/**
	 * @author Tivakar
	 * @param xmlpath
	 * @param xmldtd
	 * @param replica
	 * @return
	 * 
	 *         locateDoc method returns the results from the psiX
	 * 
	 */

	public String locateDoc(String xmlpath, String xmldtd, String replica) {
		// TODO Auto-generated method stub
		ClientHttpRequest clientReq = null;
		String output = "";
		try {
			/*
			 * Httprequest to psiX website
			 */
			clientReq = new ClientHttpRequest(
					"http://vortex.sce.umkc.edu/cgi-bin/raopr/query.cgi");

			clientReq.setParameter("xmlpath", xmlpath);
			clientReq.setParameter("xmldtd", new File(xmldtd));
			clientReq.setParameter("replica", replica);

			InputStream input = clientReq.post();

			int data = input.read();
			while (data != -1) {
				output = output + (char) data;
				data = input.read();
			}
			input.close();
			// System.out.println(output);

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return output;

	}

	/**
	 * @author tivakar
	 * @param htmlText
	 * @return
	 * 
	 *         retrieveURLnDocID method accepts htmlText string and seperates
	 *         url and docid , adds it to PsiXObject and then to ArrayList
	 */
	public ArrayList<PsiXObject> retrieveURLnDocID(String htmlText) {
		PsiXObject psiXObject = null;
		String token1;
		String urlTrimmed;
		StringTokenizer stToken1 = new StringTokenizer(htmlText);
		StringTokenizer stToken2 = null;

		String urlString;
		ArrayList<PsiXObject> psiXObjects = new ArrayList<PsiXObject>();

		while (stToken1.hasMoreElements()) {
			token1 = stToken1.nextElement().toString();
			if (token1.equals("/>[Docid:")) {
				urlString = stToken1.nextElement().toString();
				urlTrimmed = urlString.substring(0, urlString.length() - 3);

				System.out.println(urlTrimmed);

				stToken2 = new StringTokenizer(urlTrimmed, ":");

				psiXObject = new PsiXObject();

				if (stToken2.hasMoreElements() && stToken2.countTokens() == 2) {
					psiXObject.setUrl(stToken2.nextElement().toString());
					psiXObject.setDocId(stToken2.nextElement().toString());
					psiXObjects.add(psiXObject);
				}

			}
		}

		return psiXObjects;

	}

}
