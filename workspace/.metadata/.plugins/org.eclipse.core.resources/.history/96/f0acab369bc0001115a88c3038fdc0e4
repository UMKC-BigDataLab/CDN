package net.cdn.controller;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.io.File;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.cdn.Objects.XQueryObject;
import net.cdn.functions.ExecuteQueryOnPeers;
import net.cdn.functions.QueriesForPeers;
import net.cdn.functions.Xq2MaximalXp;
import net.psiX.connection.PsiXConnector;

/**
 * Servlet implementation class CDNController
 */
public class CDNController extends HttpServlet {
	private static final long serialVersionUID = 1L;

	/**
	 * @see HttpServlet#HttpServlet()
	 */
	public CDNController() {
		super();
		// TODO Auto-generated constructor stub
	}

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse
	 *      response)
	 */
	protected void doGet(HttpServletRequest request,
			HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse
	 *      response)
	 */
	protected void doPost(HttpServletRequest request,
			HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub

		
		delete_old("temp.txt");
		delete_old("e.xml");
		delete_old("f.xml");
		delete_old("x.xml");
		Thread controllerThread = null;
		
		long startTime = System.currentTimeMillis();
		
		response.setContentType("text/plain");
		PrintWriter out = response.getWriter();
		
		String xQueryFilePath = "xquery.txt";
		String maximalXpathFilePath = "maximalXpath.txt";
		String xQueryShippingFilePath = "xqueryShip.txt";
		String xQueryLocalFilePath = "local.txt";

		System.out.println("Current working directory: " + System.getProperty("user.dir"));

		String xQuery = "for $x in collection(\"cdn\")/ClinicalDocument where $x/RecordTarget/PatientRole/Patient = \"M\""
				+ " or " + "$x//observation/code/code_2407009 " +
				"return $x/RecordTarget/PatientRole/ID";
		

		int xQueryNo = Integer.parseInt(request.getParameter("queryNo"));

		xQuery = getXquery(xQueryNo,xQueryFilePath);

		System.out.println("##########");
		System.out.println("# XQUERY #");
		System.out.println("##########\n");

		System.out.println(xQuery);

		XQueryObject xQueryObj = new XQueryObject();
		xQueryObj.setxQuery(xQuery);// Setting original XQuery

		Xq2MaximalXp xq2MaxXpath = new Xq2MaximalXp();

		HashMap<String, ArrayList<String>> hMapVarNMaxXpath = xq2MaxXpath.getMaxXpath(xQueryNo,maximalXpathFilePath);
		Iterator<String> varIter = hMapVarNMaxXpath.keySet().iterator();
		String var = null;
		while (varIter.hasNext()) {
			var = varIter.next();
			System.out.println("##################################");
			System.out.println("# MAXIMAL XPATH FOR VARIABLE " + var + " #");
			System.out.println("##################################\n");

			System.out.println(hMapVarNMaxXpath.get(var));
			System.out.println("");
		}
		xQueryObj.sethMapVarNMaxXpath(hMapVarNMaxXpath);

		long startPsixTime = System.currentTimeMillis();
		
		// Creating PsiXConnector Object to connect to psiX and getting
		// hostnames
		// and pathnames
		PsiXConnector psiXConn = new PsiXConnector();
		xQueryObj = psiXConn.getHostNPathForVarLocateMaxXpath(xQueryObj);
		long endPsixTime = System.currentTimeMillis();
		
		// Forming queries for peers

		long startShippedTime = System.currentTimeMillis();
		// Forming query strings for peers

		
		controllerThread = Thread.currentThread();
		ExecuteQueryOnPeers exeQPeers = new ExecuteQueryOnPeers(controllerThread);
		exeQPeers.executeQueriesOnAllPeers(xQueryObj,xQueryNo,xQueryShippingFilePath);
		
		long endShippedTime = System.currentTimeMillis();
		
		long startLocalExecTime = System.currentTimeMillis();
		
		exeQPeers.executeQueryLocal(xQueryObj, xQueryNo, xQueryLocalFilePath);

		long endLocalExecTime = System.currentTimeMillis();
		
		try {
			FileInputStream fstream = new FileInputStream("temp.txt");
			DataInputStream in = new DataInputStream(fstream);
			BufferedReader br = new BufferedReader(new InputStreamReader(in));
			String str;
			while ((str = br.readLine()) != null) {
				out.println(str);
			}
			in.close();
		} catch (Exception e) {
			System.err.println(e);
		}

		long endTime = System.currentTimeMillis();
		
		out.println("\nTime to get response from psiX : "+ ((endPsixTime-startPsixTime)/1000.0) + " secs");
		out.println("\nTime to ship and process the query : "+ ((endShippedTime-startShippedTime)/1000.0) + " secs");
		out.println("\nTime to process the query locally : "+ ((endLocalExecTime-startLocalExecTime)/1000.0) + " secs");
		out.println("\nTotal time : "+ ((endTime-startTime)/1000.0) + " secs");
		out.flush();
		out.close();

	}

	public static String getXquery(int xQueryNo, String xQueryFilePath) {

		String strLine = null;
		FileInputStream fstream = null;
		DataInputStream in = null;
		BufferedReader br = null;

		int lineCount = 1;

		try {
			// Open the file that is the first
			// command line parameter
			fstream = new FileInputStream(xQueryFilePath);
			// Get the object of DataInputStream
			in = new DataInputStream(fstream);
			br = new BufferedReader(new InputStreamReader(in));

			// Read File Line By Line
			while (((strLine = br.readLine()) != null) && lineCount != xQueryNo) {
				lineCount++;
			}

			// Close the input stream
			in.close();

		} catch (Exception e) {// Catch exception if any
			System.err.println("Error: " + e.getMessage());
		}

		return strLine;

	}
	 public void delete_old(String a) {
		    
		    File f = new File(a);

		    // Make sure the file or directory exists and isn't write protected
		    if (!f.exists())
		      throw new IllegalArgumentException(
		          "delete_old: no such file or directory: " + a);

		    if (!f.canWrite())
		      throw new IllegalArgumentException("delete_old: write protected: "
		          + a);

		    // Attempt to delete it
		    boolean success = f.delete();

		    if (!success)
		      throw new IllegalArgumentException("delete_old: deletion failed");
		  }

}
